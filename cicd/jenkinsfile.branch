// before to merge dev
pipeline {
    agent any
    stages {
        stage('Check tools') {
            steps {
                echo 'Pipeline'
                script {
                    sh 'node --version'
                    sh 'npm -v'
                }
            }
        }

        stage('Installing nodeJs dependencies') {
			steps {
				script {
                sh 'rm -rf node_modules'
                sh 'rm -rf package-lock.json'
                sh 'npm install'
				}
			}
		}

        stage('Running Tests in development server') {
			steps {
				script {
				sh 'npm run test'
				}
			}
			post {
				always {
				step([$class: 'CoberturaPublisher', coberturaReportFile: 'output/coverage/jest/coverage.xml', lineCoverageTargets: '95, 95, 50'])
				}
			}
		}
    }

    post{
        success{
            setBuildStatus("Build succeeded", "SUCCESS");
        }

        failure {
            setBuildStatus("Build failed", "FAILURE");
        } 
    }
}

void setBuildStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/paulolopestech/CI-CD"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}